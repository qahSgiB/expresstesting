#!/usr/bin/env node

const settings = require('../a/settings.js').settings;
var app = require('../app');

var debug = require('debug')('expresstesting:server');
const fs = require('fs');

var serverFactory;
if (settings.useHttps) serverFactory = require('https');
else serverFactory = require('http');



// get port
var port = normalizePort(settings.port);
app.set('port', port);

// create http(s) server
var server;
if (settings.useHttps) {
    server = serverFactory.createServer({
        key: fs.readFileSync('./SSL/key.pem'),
        cert: fs.readFileSync('./SSL/cert.pem'),
        passphrase: 'citimsafajnajkedtaknevyzeram',
    }, app);
} else {
    server = serverFactory.createServer(app);
}

server.listen(port, settings.ip);
server.on('error', onError);
server.on('listening', onListening);



function normalizePort(val) { // normalize a port into a number, string, or false.
  var port = parseInt(val, 10);

  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
